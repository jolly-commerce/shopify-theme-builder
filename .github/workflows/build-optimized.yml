name: Build Shopify Theme

on:
  workflow_call:
    secrets:
      SLACK_BOT_TOKEN:
        required: true
      CHANNEL_ID:
        required: true

env:
  NODE_VERSION: '22'

jobs:
  check-files:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.skip-build-flag.outputs.should-build || steps.check.outputs.should-build }}
      skip-build-used: ${{ steps.skip-build-flag.outputs.skip-build-used }}
      skip-theme-check-used: ${{ steps.check-skip-flags.outputs.skip-theme-check-used }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for skip flags in commit message
        id: check-skip-flags
        run: |
          commit_message=$(git log -1 --pretty=%B)
          
          # Check for --skip-theme-check flag
          if echo "$commit_message" | grep -q -- '--skip-theme-check'; then
            echo "skip-theme-check-used=true" >> $GITHUB_OUTPUT
          else
            echo "skip-theme-check-used=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for --skip-build flag in commit message
        id: skip-build-flag
        run: |
          commit_message=$(git log -1 --pretty=%B)
          if echo "$commit_message" | grep -q -- '--skip-build'; then
            echo "--skip-build flag found in commit message. Skipping build."
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "skip-build-used=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "skip-build-used=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if build is needed
        id: check
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          if [ -z "$changed_files" ]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          non_json_files=$(echo "$changed_files" | grep -v '\.json$' || true)
          
          # Skip build only if actor is shopify[bot] AND only JSON files changed
          if [ "${{ github.actor }}" = "shopify[bot]" ] && [ -z "$non_json_files" ]; then
            echo "Shopify bot with only JSON changes, skipping build"
            echo "should-build=false" >> $GITHUB_OUTPUT
          elif [ -z "$non_json_files" ]; then
            echo "All changed files are JSON files, skipping build"
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "Non-JSON files detected, proceeding with build"
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

  theme-check:
    runs-on: ubuntu-latest
    needs: check-files
    if: needs.check-files.outputs.should-build == 'true'
    outputs:
      result: ${{ steps.theme-check.outputs.result || steps.set-skipped.outputs.result }}
      skipped: ${{ steps.skip-theme-check-flag.outputs.skip_theme_check }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for --skip-theme-check flag in commit message
        id: skip-theme-check-flag
        run: |
          commit_message=$(git log -1 --pretty=%B)
          if echo "$commit_message" | grep -q -- '--skip-theme-check'; then
            echo "skip_theme_check=true" >> $GITHUB_OUTPUT
          else
            echo "skip_theme_check=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.skip-theme-check-flag.outputs.skip_theme_check != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        if: steps.skip-theme-check-flag.outputs.skip_theme_check != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Install Shopify CLI
        if: steps.skip-theme-check-flag.outputs.skip_theme_check != 'true'
        run: npm install -g @shopify/cli @shopify/theme

      - name: Run Shopify theme check
        id: theme-check
        if: steps.skip-theme-check-flag.outputs.skip_theme_check != 'true'
        run: |
          echo "Running Shopify theme check..."
          if ! shopify theme check > theme_check_output.txt 2>&1; then
            echo "Theme check failed. Output:"
            cat theme_check_output.txt
            echo ""
            echo "result=fail" >> $GITHUB_OUTPUT
            echo "failed=true" >> $GITHUB_OUTPUT
            echo "::error title=Theme Check Failed::Please fix the theme check issues before proceeding"
            exit 1
          else
            echo "✅ Theme check passed successfully"
            echo "result=pass" >> $GITHUB_OUTPUT
            echo "failed=false" >> $GITHUB_OUTPUT
            cat theme_check_output.txt
          fi

      - name: Set skipped result
        id: set-skipped
        if: steps.skip-theme-check-flag.outputs.skip_theme_check == 'true'
        run: |
          echo "Theme check was skipped"
          echo "result=skipped" >> $GITHUB_OUTPUT

  debug-conditions:
    runs-on: ubuntu-latest
    needs: [check-files, theme-check]
    if: always()
    steps:
      - name: Debug all job outputs
        run: |
          echo "🔍 Debug Information:"
          echo "check-files.should-build: '${{ needs.check-files.outputs.should-build }}'"
          echo "check-files.skip-build-used: '${{ needs.check-files.outputs.skip-build-used }}'"
          echo "check-files.skip-theme-check-used: '${{ needs.check-files.outputs.skip-theme-check-used }}'"
          echo "theme-check.result: '${{ needs.theme-check.outputs.result }}'"
          echo "theme-check.skipped: '${{ needs.theme-check.outputs.skipped }}'"
          echo ""
          echo "Build condition evaluation:"
          echo "should-build == 'true': ${{ needs.check-files.outputs.should-build == 'true' }}"
          echo "theme-check pass or skip: ${{ needs.theme-check.outputs.result == 'pass' || needs.theme-check.outputs.result == 'skipped' }}"
          echo "Final condition: ${{ needs.check-files.outputs.should-build == 'true' && (needs.theme-check.outputs.result == 'pass' || needs.theme-check.outputs.result == 'skipped') }}"
          echo ""
          echo "Slack notification conditions:"
          echo "Skip build used: ${{ needs.check-files.outputs.skip-build-used == 'true' }}"
          echo "Skip theme check used: ${{ needs.check-files.outputs.skip-theme-check-used == 'true' }}"
          echo ""
          echo "Job statuses:"
          echo "check-files result: ${{ needs.check-files.result }}"
          echo "theme-check result: ${{ needs.theme-check.result }}"

  build:
    runs-on: ubuntu-latest
    needs: [check-files, theme-check]
    if: needs.check-files.outputs.should-build == 'true' && (needs.theme-check.outputs.result == 'pass' || needs.theme-check.outputs.result == 'skipped')
    outputs:
      assets-changed: ${{ steps.verify-changed-files.outputs.changed }}
      shopify-changes: ${{ steps.shopify-changes.outputs.files }}
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Debug build conditions
        run: |
          echo "🔍 Debugging build conditions:"
          echo "should-build: ${{ needs.check-files.outputs.should-build }}"
          echo "theme-check result: ${{ needs.theme-check.outputs.result }}"
          echo "Build condition met: ${{ needs.check-files.outputs.should-build == 'true' && (needs.theme-check.outputs.result == 'pass' || needs.theme-check.outputs.result == 'skipped') }}"
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build

      - name: Check for asset changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain assets/)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Assets have been updated by the build process"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in assets"
          fi

      - name: Get shopify bot changed files
        id: shopify-changes
        if: github.actor == 'shopify[bot]'
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            changed_files=$(git diff --name-status origin/${{ github.base_ref }}...HEAD)
          else
            changed_files=$(git diff --name-status HEAD~1 HEAD)
          fi
          
          # Filter out JSON files and format for display
          non_json_changes=$(echo "$changed_files" | grep -v '\.json$' || true)
          
          if [ -n "$non_json_changes" ]; then
            # Format changes with status (A=Added, M=Modified, D=Deleted, R=Renamed)
            formatted_changes=$(echo "$non_json_changes" | while IFS=$'\t' read -r status file rest; do
              case "$status" in
                A*) echo "• ➕ $file" ;;
                M*) echo "• ✏️ $file" ;;
                D*) echo "• ❌ $file" ;;
                R*) echo "• 🔄 $file → $rest" ;;
                *) echo "• 📝 $file" ;;
              esac
            done | sed ':a;N;$!ba;s/\n/\\n/g')
            
            # Output for GitHub
            echo "files=$formatted_changes" >> $GITHUB_OUTPUT
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Display changed files
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          echo "Files that changed:"
          git status --porcelain assets/

      - name: Commit built assets
        if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add assets/
          if ! git diff --staged --quiet; then
            git commit -m "🤖 Auto-build: Update compiled assets [skip ci]

          - Built from commit ${{ github.sha }}
          - Generated by GitHub Actions
          - Files updated: $(git diff --cached --name-only | wc -l)"
            git push
          else
            echo "No changes to commit — skipping push."
          fi

      - name: Build summary
        run: |
          echo "## Build Summary 📋" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Version:** ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Assets Changed:** ${{ steps.verify-changed-files.outputs.changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Assets:" >> $GITHUB_STEP_SUMMARY
          ls -la assets/jc-bundle-* assets/*.css 2>/dev/null | head -20 >> $GITHUB_STEP_SUMMARY || echo "No bundle files found" >> $GITHUB_STEP_SUMMARY

  slack-notify:
    runs-on: ubuntu-latest
    needs: [check-files, theme-check, build]
    if: always()
    steps:
      - name: Send Slack notification when build is skipped
        if: needs.check-files.outputs.skip-build-used == 'true'
        run: |
          export REPO_NAME="${{ github.event.repository.name }}"
          export REPO="${{ github.repository }}"
          export BRANCH="${{ github.head_ref || github.ref_name }}"
          export SHA="${{ github.sha }}"
          export ACTOR="${{ github.actor }}"
          export CHANNEL_ID="${{ secrets.CHANNEL_ID }}"
          # Check if theme check was also skipped
          THEME_CHECK_SKIPPED="${{ needs.check-files.outputs.skip-theme-check-used }}"
          if [ "$THEME_CHECK_SKIPPED" = "true" ]; then
            THEME_CHECK_STATUS="Theme check: ⏭️ Skipped"
          else
            THEME_CHECK_STATUS=""
          fi
          export THEME_CHECK_STATUS
          json=$(python3 -c 'import json, os; msg = "*Build Skipped* :fast_forward:\n*Project Name:* {repo_name}\n*Repository:* <https://github.com/{repo}|{repo}>\n*Branch:* {branch}\n*Commit:* <https://github.com/{repo}/commit/{sha}|{sha}>\n*Actor:* {actor}\n*Build was skipped using --skip-build flag*" + (f"\n\n{os.environ['THEME_CHECK_STATUS']}" if os.environ.get("THEME_CHECK_STATUS", "") else ""); msg = msg.format(repo_name=os.environ.get("REPO_NAME", ""), repo=os.environ.get("REPO", ""), branch=os.environ.get("BRANCH", ""), sha=os.environ.get("SHA", ""), actor=os.environ.get("ACTOR", "")); print(json.dumps({"channel": os.environ.get("CHANNEL_ID", ""), "text": msg, "mrkdwn": True}))')
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" -d "$json" "https://slack.com/api/chat.postMessage"

      - name: Send Slack notification on theme check failure
        if: needs.theme-check.result == 'failure'
        run: |
          export REPO_NAME="${{ github.event.repository.name }}"
          export REPO="${{ github.repository }}"
          export BRANCH="${{ github.head_ref || github.ref_name }}"
          export SHA="${{ github.sha }}"
          export ACTOR="${{ github.actor }}"
          export RUN_ID="${{ github.run_id }}"
          export CHANNEL_ID="${{ secrets.CHANNEL_ID }}"
          json=$(python3 -c 'import json, os; msg = "*Theme Check Failed* :warning:\n*Project Name:* {repo_name}\n*Repository:* <https://github.com/{repo}|{repo}>\n*Branch:* {branch}\n*Commit:* <https://github.com/{repo}/commit/{sha}|{sha}>\n*Actor:* {actor}\n*Logs:* <https://github.com/{repo}/actions/runs/{run_id}|View Logs>\n\n*Theme check failed - please fix the issues before proceeding*".format(repo_name=os.environ.get("REPO_NAME", ""), repo=os.environ.get("REPO", ""), branch=os.environ.get("BRANCH", ""), sha=os.environ.get("SHA", ""), actor=os.environ.get("ACTOR", ""), run_id=os.environ.get("RUN_ID", "")); print(json.dumps({"channel": os.environ.get("CHANNEL_ID", ""), "text": msg, "mrkdwn": True}))')
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" -d "$json" "https://slack.com/api/chat.postMessage"

      - name: Send Slack notification on build success with changes
        if: needs.build.result == 'success' && needs.build.outputs.assets-changed == 'true' && needs.check-files.outputs.skip-build-used != 'true'
        run: |
          export REPO_NAME="${{ github.event.repository.name }}"
          export REPO="${{ github.repository }}"
          export BRANCH="${{ github.head_ref || github.ref_name }}"
          export SHA="${{ github.sha }}"
          export ACTOR="${{ github.actor }}"
          export SHOPIFY_CHANGES="${{ needs.build.outputs.shopify-changes }}"
          export CHANNEL_ID="${{ secrets.CHANNEL_ID }}"
          THEME_CHECK_RESULT="${{ needs.theme-check.outputs.result }}"
          if [ "$THEME_CHECK_RESULT" = "pass" ]; then
            THEME_CHECK_STATUS="Theme check: ✅ Passed"
          elif [ "$THEME_CHECK_RESULT" = "skipped" ]; then
            THEME_CHECK_STATUS="Theme check: ⏭️ Skipped"
          else
            THEME_CHECK_STATUS="Theme check: ❌ Failed"
          fi
          export THEME_CHECK_STATUS
          json=$(python3 -c 'import json, os; msg = "*Build Succeeded* :tada:\n*Project Name:* {repo_name}\n*Repository:* <https://github.com/{repo}|{repo}>\n*Branch:* {branch}\n*Commit:* <https://github.com/{repo}/commit/{sha}|{sha}>\n*Actor:* {actor}\n*Assets were updated*\n\n{theme_check_status}".format(repo_name=os.environ.get("REPO_NAME", ""), repo=os.environ.get("REPO", ""), branch=os.environ.get("BRANCH", ""), sha=os.environ.get("SHA", ""), actor=os.environ.get("ACTOR", ""), theme_check_status=os.environ.get("THEME_CHECK_STATUS", "")) + (f"\n\n*Shopify Bot Changes (non-JSON):*\n{os.environ['SHOPIFY_CHANGES']}" if os.environ.get("SHOPIFY_CHANGES", "") else ""); print(json.dumps({"channel": os.environ.get("CHANNEL_ID", ""), "text": msg, "mrkdwn": True}))')
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" -d "$json" "https://slack.com/api/chat.postMessage"

      - name: Send Slack notification on build success without changes
        if: needs.build.result == 'success' && needs.build.outputs.assets-changed == 'false' && github.event_name == 'push' && needs.check-files.outputs.skip-build-used != 'true'
        run: |
          export REPO_NAME="${{ github.event.repository.name }}"
          export REPO="${{ github.repository }}"
          export BRANCH="${{ github.head_ref || github.ref_name }}"
          export SHA="${{ github.sha }}"
          export ACTOR="${{ github.actor }}"
          export SHOPIFY_CHANGES="${{ needs.build.outputs.shopify-changes }}"
          export CHANNEL_ID="${{ secrets.CHANNEL_ID }}"
          THEME_CHECK_RESULT="${{ needs.theme-check.outputs.result }}"
          if [ "$THEME_CHECK_RESULT" = "pass" ]; then
            THEME_CHECK_STATUS="Theme check: ✅ Passed"
          elif [ "$THEME_CHECK_RESULT" = "skipped" ]; then
            THEME_CHECK_STATUS="Theme check: ⏭️ Skipped"
          else
            THEME_CHECK_STATUS="Theme check: ❌ Failed"
          fi
          export THEME_CHECK_STATUS
          json=$(python3 -c 'import json, os; msg = "*Build Completed* :white_check_mark:\n*Project Name:* {repo_name}\n*Repository:* <https://github.com/{repo}|{repo}>\n*Branch:* {branch}\n*Commit:* <https://github.com/{repo}/commit/{sha}|{sha}>\n*Actor:* {actor}\n*No changes in assets*\n\n{theme_check_status}".format(repo_name=os.environ.get("REPO_NAME", ""), repo=os.environ.get("REPO", ""), branch=os.environ.get("BRANCH", ""), sha=os.environ.get("SHA", ""), actor=os.environ.get("ACTOR", ""), theme_check_status=os.environ.get("THEME_CHECK_STATUS", "")) + (f"\n\n*Shopify Bot Changes (non-JSON):*\n{os.environ['SHOPIFY_CHANGES']}" if os.environ.get("SHOPIFY_CHANGES", "") else ""); print(json.dumps({"channel": os.environ.get("CHANNEL_ID", ""), "text": msg, "mrkdwn": True}))')
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" -d "$json" "https://slack.com/api/chat.postMessage"

      - name: Send Slack notification on build failure
        if: needs.build.result == 'failure' && needs.check-files.outputs.skip-build-used != 'true'
        run: |
          export REPO_NAME="${{ github.event.repository.name }}"
          export REPO="${{ github.repository }}"
          export BRANCH="${{ github.head_ref || github.ref_name }}"
          export SHA="${{ github.sha }}"
          export ACTOR="${{ github.actor }}"
          export RUN_ID="${{ github.run_id }}"
          export SHOPIFY_CHANGES="${{ needs.build.outputs.shopify-changes }}"
          export CHANNEL_ID="${{ secrets.CHANNEL_ID }}"
          THEME_CHECK_RESULT="${{ needs.theme-check.outputs.result }}"
          if [ "$THEME_CHECK_RESULT" = "pass" ]; then
            THEME_CHECK_STATUS="Theme check: ✅ Passed"
          elif [ "$THEME_CHECK_RESULT" = "skipped" ]; then
            THEME_CHECK_STATUS="Theme check: ⏭️ Skipped"
          else
            THEME_CHECK_STATUS="Theme check: ❌ Failed"
          fi
          export THEME_CHECK_STATUS
          json=$(python3 -c 'import json, os; msg = "*Build Failed* :warning:\n*Project Name:* {repo_name}\n*Repository:* <https://github.com/{repo}|{repo}>\n*Branch:* {branch}\n*Commit:* <https://github.com/{repo}/commit/{sha}|{sha}>\n*Actor:* {actor}\n*Logs:* <https://github.com/{repo}/actions/runs/{run_id}|View Logs>\n\n{theme_check_status}".format(repo_name=os.environ.get("REPO_NAME", ""), repo=os.environ.get("REPO", ""), branch=os.environ.get("BRANCH", ""), sha=os.environ.get("SHA", ""), actor=os.environ.get("ACTOR", ""), run_id=os.environ.get("RUN_ID", ""), theme_check_status=os.environ.get("THEME_CHECK_STATUS", "")) + (f"\n\n*Shopify Bot Changes (non-JSON):*\n{os.environ['SHOPIFY_CHANGES']}" if os.environ.get("SHOPIFY_CHANGES", "") else ""); print(json.dumps({"channel": os.environ.get("CHANNEL_ID", ""), "text": msg, "mrkdwn": True}))')
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" -d "$json" "https://slack.com/api/chat.postMessage" 